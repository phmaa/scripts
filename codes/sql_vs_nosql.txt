/* ----------------------------------------------------
		Translating from SQL to NoSQL
		Connect to the Mongo Atlas cluster. This has been preloaded with the required data
---------------------------------------------------- */

/* -----------------------------------
		question: In all the years covered in this table, how many nobel prizes where presented
    for individuals summarized by the individals country of birth. Show country and count only
    -- --------------------------------------- */
	Select `Birth Country`, count(*) as prizesAwarded
	FROM nobel_laureates_1901_2019
	where `Birth Country` != ""
	group by `Birth Country`
	having count(*) > 20
	order by count(*) desc;

/* nosql

db.nobel_laureates.aggregate([
{$match:{"Birth Country": {$ne:""}}},
{$group: {_id:"$Birth Country", prizeAward: {$sum: "$Birth Country"}}},
{$match: {prizeAward: {$gt: 20}}} ,
{$sort: {prizeAward: -1}}
]);

[ { _id: 'United States of America', prizeAward: 276 },
  { _id: 'United Kingdom', prizeAward: 88 },
  { _id: 'Germany', prizeAward: 70 },
  { _id: 'France', prizeAward: 53 },
  { _id: 'Sweden', prizeAward: 30 },
  { _id: 'Japan', prizeAward: 29 } ]

*/

/* 	----------------------------------------------------
	faa_usairports_all
		This is a table from FAA open data of all airports in the USA
	---------------------------------------------------- */
/* question: what are the names, city, state, elevation and faa identifier of
			the Heliports in the US that have an elevation over 2000 feet */
	SELECT name, service_city, state_abbreviation, country, elevation, faa_identifier
	FROM faa_usairports_all
	WHERE elevation > 2000 and airport_type = "Heliport";
	-- this returns 621 rows

/* NoSQL - Your turn

	db.faa_usairports.find(
	{ elevation: {$gt: 2000}, airport_type: "Heliport" },
	{name: 1, service_city: 1, state_abbreviation: 1, country: 1, elevation: 1, faa_identifier: 1, _id: 0})

{ faa_identifier: 'AA14',
  name: 'Toolik',
  elevation: 2405,
  service_city: 'Toolik Field Station',
  state_abbreviation: 'AK',
  country: 'United States' }
{ faa_identifier: '09AA',
  name: 'Sheldon Chalet',
  elevation: 5742,
  service_city: 'Talkeetna',
  state_abbreviation: 'AK',
  country: 'United States' }
{ faa_identifier: 'AZ16',
  name: 'Northern Cochise Community Hospital',
  elevation: 4174,
  service_city: 'Willcox',
  state_abbreviation: 'AZ',
  country: 'United States' }
{ faa_identifier: '70AZ',
  name: 'Rgnl Public Safety Training Academy',
  elevation: 2580,
  service_city: 'Tucson',
  state_abbreviation: 'AZ',
  country: 'United States' }
{ faa_identifier: 'AZ89',
  name: 'Sierra Vista Rgnl Health Center',
  elevation: 4548,
  service_city: 'Sierra Vista',
  state_abbreviation: 'AZ',
  country: 'United States' }

// to get row count
db.faa_usairports.find( { elevation: {$gt: 2000}, airport_type: "Heliport" } ).count()

*/

/* question: what states have seaports and how many in each state */
SELECT state_abbreviation, count(*)
FROM faa_usairports_all
WHERE airport_type = "Seaport"
GROUP BY state_abbreviation
ORDER BY count(*) DESC;

/*
// NoSQL
db.faa_usairports.aggregate([
{$match: {airport_type: "Seaport"} },
{$group: {_id: "$state_abbreviation", count: {$sum: 1 }} },
{$sort: {count: -1}}
])

[ { _id: 'AK', count: 137 },
  { _id: 'MN', count: 62 },
  { _id: 'FL', count: 56 },
  { _id: 'ME', count: 46 },
  { _id: 'IN', count: 18 },
  { _id: 'WA', count: 17 },
  { _id: 'WI', count: 17 },
  { _id: 'MA', count: 17 },
*/

/* Question: Create a SIMPLE question of your own of the FAA airport dataset
List the names, city, state, and elevation of the top five airports that have
an elevation over 10000 feet, order by elevation */
-- SQL answer
// -- your sql goes here
	SELECT name, service_city, state_abbreviation, country, elevation
	FROM faa_usairports_all
    where elevation >=10000
	order by elevation desc limit 5;

/* NoSQL answer
// -- your nosql goes here
db.faa_usairports.find(
{elevation: {$gte: 10000}},
{_id: null, name: 1, service_city:1, state_abbreviation: 1, country: 1, elevation:1}).limit(5).sort({elevation: -1});

{ name: 'Berthoud Pass',
  elevation: 12442,
  service_city: 'Empire',
  state_abbreviation: 'CO',
  country: 'United States' }
{ name: 'Badger Mountain',
  elevation: 11294,
  service_city: 'Tarryall',
  state_abbreviation: 'CO',
  country: 'United States' }
{ name: 'Sacramento',
  elevation: 11104,
  service_city: 'Fairplay',
  state_abbreviation: 'CO',
  country: 'United States' }
{ name: 'Mount Princeton',
  elevation: 10858,
  service_city: 'Mount Princeton',
  state_abbreviation: 'CO',
  country: 'United States' }
{ name: 'Arapahoe',
  elevation: 10672,
  service_city: 'Idaho Springs',
  state_abbreviation: 'CO',
  country: 'United States' }
*/

/* 	----------------------------------------------------
	usa_names_nc_1910_2019
		This is a table of all first names provided on all Social Security Cards Applications since 1910 (11 decades)
	---------------------------------------------------- */
-- question: Using any name of your choice, How many SSNumbers were requested in total?

-- Your SQL  -------------------
SELECT sum(number) as nameCount
FROM usa_names_nc_1910_2019
WHERE name IN ("Steve", "Steven","Stevie");

/* Your NoSQL

	db.usa_names_nc.aggregate([{$match: {name: {$in: ["Steve", "Steven", "Stevie"]}}},
    {$group: {_id: null, nameCount: {$sum: "$number"}}} ])

[ { _id: null, nameCount: 31319 } ]

*/

-- question: change the above so year is included in the grouping
-- my sql
SELECT year, name, sum(number) as nameCount
FROM usa_names_nc_1910_2019
WHERE name IN ("Steve", "Steven","Stevie")
group by year, name
order by year;
-- your sql


/* YOUR NoSQL

	db.usa_names_nc.aggregate([
	{$match: {name: {$in: ["Steve", "Steven", "Stevie"]}}},
	{$group: {_id: {year: "$year", name: "$name", nameCount: {$sum: "$number"}} }},
	{$sort: {_id: 1}}
	])

*/

-- question: Create a SIMPLE question of your own of the Social Security application first name dataset on any criteria
-- Display the top ten most popular names.
-- yours  SQL
	--	 your sql goes here
select name, count(name) as top_ten_names
from usa_names_nc_1910_2019
group by name
order by top_ten_names desc limit 10;

/* your NoSQL
	-- your nosql goes here
	db.usa_names_nc.aggregate([
    {$match: {name: {$ne:null}}},
	{$group: {_id: "$name", top_ten_names: {$sum: 1} }},
	{$sort: {top_ten_names: -1}},
	{$limit: 10}
	]);

    [ { _id: 'Jessie', top_ten_names: 218 },
  { _id: 'Lee', top_ten_names: 191 },
  { _id: 'Marion', top_ten_names: 188 },
  { _id: 'James', top_ten_names: 187 },
  { _id: 'William', top_ten_names: 178 },
  { _id: 'Leslie', top_ten_names: 175 },
  { _id: 'Willie', top_ten_names: 173 },
  { _id: 'Robert', top_ten_names: 173 },
  { _id: 'John', top_ten_names: 171 },
  { _id: 'Kelly', top_ten_names: 168 } ]
*/
